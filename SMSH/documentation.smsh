#(About the compiler and how to use it) Compiler

The SMSH compiler is written in C#, and you can download it on <a{https://github.com/Ascyt/smsh} GitHub>. 
Here you can also find the source code, together with the code used to generate this documentation, which, by the way, is also written in SMSH.

.h2 Compiler usage

Argument 1 is for the input file, and there is an optional argument <code -o> for the output file, which defaults to <code <i filename>.html>. 

#(How to write elements) Element syntax

SMSH goes from top to bottom. Empty lines and lines containing nothing but whitespaces are completely ignored. You can define a whole element by doing <code .<i tag>>, and then writing the text body after it like this:

.card
    .pre 
        . .h4 I am a simple header :)
        
    .h4 I am a simple header :)
    
Alternatively, you can put everything in a line lower with one tab as indentation (use <code :spaces [spaces]> to use spaces instead), like this:

.card
    .pre
        . .h4
        .     I am also a simple header. 
        .     However, you can give me multiple lines!
        
    .h4
        I am also a simple header. 
        However, you can give me multiple lines!
    
The most common element you'll use is the normal text element, and it doesn't have a tag:
.card
    .pre . I am a normal text.
    
    . I am a normal text.
    
Unless it's a child of an element, you can even leave the <code .> away:

.card
    .pre I am a normal text.
    
    . I am a normal text.
    > Have to do it here since it's a child of .card :)
    
Or you could choose to have your element be only text, in which case you don't need <code .>.

By default text makes linebreaks, however if you put a <code \\> at the end of your line, there will not be a linebreak set. \
Just like in HTML, you can also set linebreaks manually using <code \<br\>>.

You can also nest elements:
.card 
    .pre
        . .ul
        .     .li
        .         .h4 Headers...
        .     .li
        .         .h4 ...in lists!
        
    .ul
        .li
            .h4 Headers...
        .li
            .h4 ...in lists!

.h2 Extra elements

There are some elements that you can only define at the start of your page. Instead of using a <code .> character, these elements use the <code :> symbol.

If you make a line that starts with a <code ,> symbol, it acts as a <code margin-bottom> (you can put the size after it, defaults to <code 16px> or <code 1> (<code 2> would be 2x margin)). 
Lines that start with <code \>> get completely ignored and act as comments.
> I am a comment :)


#(Attributes for elements, for styling and links) Element attributes

When you have an element, you can add attributes next to the tag: 
.card 
    .pre .b[color:blue] I'm Blue da ba dee da ba daa
    .b[color:blue] I'm Blue da ba dee da ba daa
    
Attributes are applied left to right and must be after the tag. The order does not matter. Spaces inside attributes are allowed.

.h3 These are the types of attributes:

.card
    .ul
        .li <b(high) class> (normal braces <code (> <code )>): The class of the element. By default there's <code high> and <code low>. Here you can use your <a{#6} custom classes>. 
        .li <b(high) style> (square brackets <code [> <code ]>): Custom CSS styling of the element.
        .li <b(high) link> (curly braces <code {> <code }>): The link of the element. Used mainly for links <code .a> and images <code .img> (image source, rest of the text is alt text). When clicked, the links will open in a new tab. 
        

So you can embed the funny Garfield comic that I keep forgetting about like this:
.card 
    .pre .img{https://i.kym-cdn.com/photos/images/original/002/346/435/f06.jpg} Garfield comic
    .img[width:400px;height:auto;]{https://i.kym-cdn.com/photos/images/original/002/346/435/f06.jpg} Garfield comic
    > Alright alright, I might've made the image a little smaller than it would be normally ;)

#(Define elements inside of text) Element inline

You can also put elements inside of lines, by wrapping them in corner braces (<code \<> <code \>>). The first argument is the element, the rest is the text.
Note that you don't have to include a <code .> before the element for inline. 

Here's an example:
.card 
    .pre . I'm normal. \<b I'm bold.\> \<i I'm italic.\> \<[color: yellow] I'm piss.\> \<(high) I'm high priority.\> \<code I'm code.\>
    . I'm normal. <b I'm bold.> <i I'm italic.> <[color: yellow] I'm piss.> <(high) I'm high priority.> <code I'm code.>

.(low) Hint: Put a <code \\> before <code \<> or <code \>> to escape them and write them as normal characters.

#(Structure the file into sections which show in the sidebar) Sections
You can define a section by having a line starting with a <code #> symbol. 

This will automatically add the title for that section and add the section to the sidebar on the left, so you're able to click on it to jump to it.

If you do not want a default title, put two hashes <code ##> at the start instead of one <code #>.

If you put something right after the <code #> in braces <code (> <code )>, it will be the description of the section. This is the dark gray text you see under the sections, and also gets shown when you hover over the section's sidebar item. This is optional.

Here's what this section ("Sections") looks like:
.pre #(Structure the file into sections which show in the sidebar) Sections

Also, note that special elements cannot be defined under sections.

#(Structure the file into tabs which show at the top of the page) Tabs
Tabs are similar to sections, but they use the <code @> symbol instead. 

This will add the title to the navigation bar at the top of the page. Only one tab can be visible at a time, if you click on one tab the other ones, including their sidebars get hidden. 

Here's what this tab ("Documentation") looks like:
.pre @ Documentation

Note that you can either have no tabs and therefore no navigation bar at all, or you can use them and have to put the first tab before the first element.

#(How to define your own CSS classes to be used) Custom CSS classes

You can create custom CSS classes using the <code $> prefix. Here is an example:

.pre
    . $myCustomClass
    .     color: green;
    .     font-size: medium;

Everything indented is part of the CSS class. You must define CSS classes before sections, and they must not be defined twice (case sensitive).

.(myCustomClass) Example usage of above class
> Class definition is in index.smsh on line 8

#(Use templates to avoid duplication) Templates

Templates are snippets of text that can be used multiple times with certain values being different. They use the <code ~> symbol.

You can define an element using <code ~+>, followed by its name and the parameter's names. Then the value is put indented after it. 

For example:
.pre 
    . ~+introduction name age
    .     My name's \<b \>name\> and I'm \>age years old. 
~+introduction name age
    My name's <b >name> and I'm >age years old. 

As you can see, you can use the parameters using <code \><i parameter>> inside the template.
,
You can then access the template using just <code ~>, with the parameter values put after <code \>> symbols:
.card 
    .pre 
        . ~introduction \>Filip \>16 and a half
    ~introduction >Filip >16 and a half

This also works inline:
.card
    .pre 
        . My introduction is: \<~introduction \>John Smith \>&#92;\>18\> :)
    My introduction is: <~introduction >John Smith >\>18> :)
,
You can then delete templates using <code ~-> and the template name:
.pre
    . ~-introduction
~-introduction

.(low) Note: Inline tags are currently not supported as parameter values.

#(Import other SMSH files in your document) Multiple files

To import another file into your SMSH document, you can use the <code !> operator. Put the name of the file after it, the <code .smsh> extension is optional. 

This will act as though you have added the file's contents to the document. 

For example, say have a file called <code hello.smsh> which is just one line:
.pre
    . Hello, world!
You can then add this file to your main SMSH like this:
.pre 
    . !hello

You can also add a single file multiple times.

#(A list of the most common SMSH elements) Elements
SMSH supports pretty much every HTML tag out there, to some degree at least. However, these are the most common ones:

.card
    .h1 Header 1 <code .h1> (Default for sections)
    .h2 Header 2 <code .h2>
    .h3 Header 3 <code .h3>
    .h4 Header 4 <code .h4>
    . Normal text <code .>/<code >
    .(high) high text <code .(high)>
    .(low) low text <code .(low)>
    .a{https://ascyt.com/} Link <code a{"https://..."}> <br>
    .code code .code
        
    .pre
        Multi-line code block <code .pre>
    
    .h3 Unordered list
    .card 
        .ul
            .li unordered list
            .li unordered list
                .ul 
                    .li nested
        .pre 
            . .ul
            .     .li 
            .         . unordered list
            .     .li 
            .         . unordered list
            .         .ul 
            .             .li nested
        
    .card
        .uli unordered list shorthand
        .pre
            . .uli unordered list shorthand
    
    .h3 Ordered list
    .card
        .ol
            .li ordered list
            .li ordered list
        .pre 
            . .ol
            .     .li ordered list
            .     .li ordered list
                
    .card 
        .oli ordered list shorthand
        .pre
            . .oli ordered list shorthand


    .h3 Table
    .card
        .table 
            .tr
                .th table
                .th row
                .th header
            .tr 
                .td table
                .td row
                .td data
            .tr 
                .td table
                .td row
                .td data
            .tr 
                .td table
                .td row
                .td data
            .tr 
                .td table
                .td row
                .td data
        .pre 
            . .table 
            .     .tr
            .         .th table
            .         .th row
            .         .th header
            .     .tr 
            .         .td table
            .         .td row
            .         .td data
            . \> ...
    .card 
        .row
            .td table row shorthand
        .row
            .td table row shorthand
        .pre 
            . .row
            .     .td table row shorthand
            . .row
            .     .td table row shorthand
            
    .card
        . Card <code .card>

#(A list of all available special elements) Special elements
Special elements are elements that change the way the output HTML looks like, or how the compiler reads SMSH. They can be used to, for example, change the title of the HTML document. 
A special element starts with <code :> and must be defined before any elements or sections. 

Here's a list of all the special elements available:

.card 
    .ul
        .li 
            . <b(high) title> (title)<(low) :> Set the title of the document. 
            .h4 Here: 
            .pre :title SMSH-Documentation
        .li 
            . <b(high) theme> (theme)<(low) :> Set the colors of the document, either <code light> or <code dark>. 
            .h4 Here:
            .pre :theme dark
        .li 
            . <b(high) toTopText> text<(low) :> Set the text shown when hovering over the <code ^> button at the bottom right of the screen.
            .pre :toTopText Back to top
        .li 
            . <b(high) hideCredit><(low) :> Removes the message shown at the bottom of the page.  
        .li 
            . <b(high) spaces> amount<(low) :> Tells the compiler to use spaces as a substitute for tabs. Put a number after <code :spaces> to specify the amount, (4 if you're using Visual Studio Code). 
            . <b Note that this is the only special element you don't need to put before all elements.> This means you can put them in SMSH imports and not have them break depending on the main file.
            .h4 Here:
            .pre :spaces 4
        .li 
            . <b(high) font> font<(low) :> The CSS font that gets used. 
            .h4 Here:
            .pre :font Arial
        .li 
            . <b(high) favicon> href<(low) :> Link to the favicon (the icon text to the document title).
            .h4 Here:
            .pre :favicon https://www.ascyt.com/projects/smsh/favicon.ico
        .li 
            . <b(high) initialHash> value<(low) :> The hash that gets used when none is specified (when the HTML is opened initially). Don't write the <code #> symbol, just write the number.
            .h4 Here:
            .pre :initialHash 0
